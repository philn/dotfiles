#!/usr/bin/env python3

import os
import subprocess
import sys

LOCATION = os.path.expanduser('~/WebKit/Tools/Scripts/hooks/prepare-commit-msg')
SPACING = 8
SCRIPTS = os.path.dirname(os.path.dirname(LOCATION))

sys.path.append(SCRIPTS)
sys.path.insert(0, os.path.expanduser('~/WebKit/Tools/Scripts'))

def message(source=None, sha=None):
    dirname = None
    commit_message = []

    # My branches are named eng/numeric-bug-id, so get bug-id and generate ChangeLog accordingly.
    extra_args = []
    branch_name = subprocess.check_output(('git', 'rev-parse', '--abbrev-ref', 'HEAD'))
    if branch_name.startswith(b'eng/'):
        bugid = branch_name.split(b'/')[1].strip()
        extra_args.extend(['-b', bugid])

    try:
        for line in subprocess.check_output(
            [os.path.expanduser('~/WebKit/Tools/Scripts/prepare-ChangeLog'), '--no-write', '--delimiters', '--git-index'] + extra_args,
            **(dict(encoding='utf-8'))
        ).splitlines():
            if line == '~':
                dirname = None
                continue
            if line.startswith(' ' * SPACING):
                if dirname:
                    line = line.replace('* ', '* {}/'.format(dirname))
                commit_message.append(line[SPACING:])
                continue
            elif not line:
                commit_message.append(line)
            if line.endswith(':'):
                dirname = line.split(':')[0]
                continue

        # Skip first line (date, author...) and second line (empty).
        return '\n'.join(commit_message[2:])
    except subprocess.CalledProcessError:
        return ''

def main(file_name=None, source=None, sha=None):
    if source not in (None, 'commit', 'template'):
        return 0

    with open(file_name, 'w') as commit_message_file:
        if sha:
            commit_message_file.write(subprocess.check_output(
                ['/usr/bin/git', 'log', 'HEAD', '-1', '--pretty=format:%B'],
                **(dict(encoding='utf-8'))
            ))
        else:
            commit_message_file.write(message(source=source, sha=sha))

        commit_message_file.write('''
# Please populate the above commit message. Lines starting
# with '#' will be ignored

''')
        if sha:
            for line in message(source=source, sha=sha).splitlines():
                commit_message_file.write('# {}\n'.format(line))
            commit_message_file.write('\n')
        for line in subprocess.check_output(
            ['/usr/bin/git', 'status'],
            **(dict(encoding='utf-8'))
        ).splitlines():
            commit_message_file.write('# {}\n'.format(line))

    return 0


if __name__ == '__main__':
    sys.exit(main(*sys.argv[1:]))
